version: "3.9"  

name: pulse-bridge

x-env: &app-env  
  ASPNETCORE_ENVIRONMENT: Development  

  # OpenTelemetry settings (override via .env)
  OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
  OTEL_SERVICE_NAME: ${OTEL_SERVICE_NAME:-service}

  # App settings (override via .env)
  ConnectionStrings__QuartzNet: ${DB_CONN}  
  ConnectionStrings__IDP_DB: ${IDP_DB_CONN}  
  ConnectionStrings__Redis: redis:${REDIS_PORT},password=${REDIS_PW} 

  # RabbitMQ settings consumed by Worker/Scheduler
  RabbitMq__Host: rabbitmq 
  RabbitMq__User: ${RABBITMQ_USER}
  RabbitMq__Pass: ${RABBITMQ_PASS}

networks:
  edge_net: { driver: bridge }  # Public edge for ingress/host access
  app_net: { driver: bridge, internal: true }  # Internal app-only network sql/redis/rabbitmq
  data_net: { driver: bridge, internal: true }  
  
secrets:
  sql_sa_password: { file: ./traefik/secrets/sql_sa_password.txt }
  rabbitmq_password: { file: ./traefik/secrets/rabbitmq_password.txt }
  redis_password: { file: ./traefik/secrets/redis_password.txt }

services:
  traefik:
    image: traefik:v3.1  # Reverse proxy and router
    command:
      - --api.dashboard=false  # Enable built-in dashboard (internal)
      - --providers.docker=true  # Watch Docker for dynamic config
      - --providers.docker.exposedbydefault=false  # Require explicit opt-in via labels
      - --entrypoints.websecure.address=:443  # HTTPS entrypoint
      - --providers.file.filename=/etc/traefik/dynamic.yml
      #- --api.insecure=true  # Expose dashboard without auth (local only)
    ports:
      - "443:443"  # Expose HTTPS if configured
      #- "80:80"  # Expose HTTP from host to Traefik
    volumes:
      - ./traefik/dynamic.yml:/etc/traefik/dynamic.yml:ro
      - ./traefik/certs:/certs:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro  # Read-only access to Docker events
    networks: [edge_net, app_net]  # Reach host and internal services
    healthcheck:
      test: ["CMD", "traefik", "healthcheck"]  # Liveness probe
      interval: 10s  # How often to check
      timeout: 5s  # Max time per check
      retries: 5  # Fail after N attempts

  idp:
    image: pulse-bridge-idp:1.0
    container_name: pulse-bridge-idp
    environment:
      <<: *app-env  # Merge common .NET env
      ASPNETCORE_URLS: http://+:8080  # Listen on port 8081 in container  
      Auth__Issuer: https://idp.localtest.me  # <-- fix
    labels:
      # Opt-in to Traefik routing
      - traefik.enable=true  
      - traefik.docker.network=pulse-bridge_app_net

      # router/service config
      - traefik.http.routers.idp.rule=Host(`idp.localtest.me`)  # Route by host
      - traefik.http.routers.idp.entrypoints=websecure
      - traefik.http.routers.idp.tls=true  # Enable TLS
      - traefik.http.routers.idp.middlewares=retry-2@file,gzip@file,secure-headers@file

      # load balancer service with health checks
      - traefik.http.services.idp.loadbalancer.server.port=8080  # Container port
      - traefik.http.services.idp.loadbalancer.healthcheck.path=/health/ready
      - traefik.http.services.idp.loadbalancer.healthcheck.interval=10s
      - traefik.http.services.idp.loadbalancer.healthcheck.timeout=3s

    networks: [app_net, data_net]  # Internal only; fronted by Traefik
    depends_on:
      - sql  # Needs DB
      - redis  # Uses Redis for caching
      - otel-collector  # Optional: waits for OTEL
    security_opt: ["no-new-privileges:true"]  # Drop root privileges for security
    restart: unless-stopped  # Auto-restart for resilience

  acctapi:
    image: pulse-bridge-acctapi:1.0
    container_name: pulse-bridge-acctapi
    environment:
      <<: *app-env  # Merge common .NET env
      ASPNETCORE_URLS: http://+:8080  # Listen on port 8083 in container  
      Auth__Issuer: https://idp.localtest.me  # <-- fix
    labels:
      # Opt-in to Traefik routing
      - traefik.enable=true  
      - traefik.docker.network=pulse-bridge_app_net

      # router/service config
      - traefik.http.routers.acctapi.rule=Host(`acctapi.localtest.me`)  # Route by host
      - traefik.http.routers.acctapi.entrypoints=websecure
      - traefik.http.routers.acctapi.tls=true  # Enable TLS
      - traefik.http.routers.acctapi.middlewares=retry-2@file,gzip@file,secure-headers@file

      # load balancer service with health checks
      - traefik.http.services.acctapi.loadbalancer.server.port=8080  # Container port
      - traefik.http.services.acctapi.loadbalancer.healthcheck.path=/health/ready
      - traefik.http.services.acctapi.loadbalancer.healthcheck.interval=10s
      - traefik.http.services.acctapi.loadbalancer.healthcheck.timeout=3s

    networks: [app_net, data_net]  # Internal only; fronted by Traefik
    depends_on:
      - sql  # Needs DB
      - redis  # Uses Redis for caching
      - otel-collector  # Optional: waits for OTEL
    security_opt: ["no-new-privileges:true"]  # Drop root privileges for security
    restart: unless-stopped  # Auto-restart for resilience

  payapi:
    image: pulse-bridge-payapi:1.0
    container_name: pulse-bridge-payapi
    environment:
      <<: *app-env  # Merge common .NET env
      ASPNETCORE_URLS: http://+:8080  # Listen on port 8082 in container  
      Auth__Issuer: https://idp.localtest.me  # <-- fix
    labels:
      # Opt-in to Traefik routing
      - traefik.enable=true  
      - traefik.docker.network=pulse-bridge_app_net

      # router/service config
      - traefik.http.routers.payapi.rule=Host(`payapi.localtest.me`)  # Route by host
      - traefik.http.routers.payapi.entrypoints=websecure
      - traefik.http.routers.payapi.tls=true  # Enable TLS
      - traefik.http.routers.payapi.middlewares=retry-2@file,gzip@file,secure-headers@file

      # load balancer service with health checks
      - traefik.http.services.payapi.loadbalancer.server.port=8080  # Container port
      - traefik.http.services.payapi.loadbalancer.healthcheck.path=/health/ready
      - traefik.http.services.payapi.loadbalancer.healthcheck.interval=10s
      - traefik.http.services.payapi.loadbalancer.healthcheck.timeout=3s

    networks: [app_net, data_net]  # Internal only; fronted by Traefik
    depends_on:
      - sql  # Needs DB
      - redis  # Uses Redis for caching
      - otel-collector  # Optional: waits for OTEL
    security_opt: ["no-new-privileges:true"]  # Drop root privileges for security
    restart: unless-stopped  # Auto-restart for resilience

  api:
    image: pulse-bridge-api:1.0  
    container_name: pulse-bridge-api  
    environment:
      <<: *app-env  # Merge common .NET env
      ASPNETCORE_URLS: http://+:8080  
    labels:
      # Opt-in to Traefik routing
      - traefik.enable=true  
      - traefik.docker.network=pulse-bridge_app_net

      # router/service config
      - traefik.http.routers.api.rule=Host(`api.localtest.me`)  # Route by host
      - traefik.http.routers.api.entrypoints=websecure
      - traefik.http.routers.api.tls=true  # Enable TLS
      - traefik.http.routers.api.middlewares=retry-2@file,gzip@file,secure-headers@file

      # load balancer service with health checks
      - traefik.http.services.api.loadbalancer.server.port=8080  # Container port
      - traefik.http.services.api.loadbalancer.healthcheck.path=/health/ready
      - traefik.http.services.api.loadbalancer.healthcheck.interval=10s
      - traefik.http.services.api.loadbalancer.healthcheck.timeout=3s

    networks: [app_net, data_net]  # Internal only; fronted by Traefik
    depends_on:
      - sql  # Needs DB
      - redis  # Uses Redis for caching
      - otel-collector  # Optional: waits for OTEL
    security_opt: ["no-new-privileges:true"]  # Drop root privileges for security
    restart: unless-stopped  # Auto-restart for resilience

  web:
    image: pulse-bridge-web:1.0  
    container_name: pulse-bridge-web  
    environment:
      <<: *app-env  # Merge common .NET env
      Auth__Issuer: https://idp.localtest.me  
    labels:
      # Opt-in to Traefik routing
      - traefik.enable=true  
      - traefik.docker.network=pulse-bridge_app_net

      # router/service config
      - traefik.http.routers.websecure.rule=Host(`ui.localtest.me`)  # Route by host
      - traefik.http.routers.websecure.entrypoints=websecure
      - traefik.http.routers.websecure.tls=true  # Enable TLS
      - traefik.http.routers.websecure.middlewares=gzip@file,secure-headers@file
      - traefik.http.services.web.loadbalancer.server.port=80  # Container port
    networks: [app_net]  # Only needs internal app net
    depends_on: [traefik]  # Ensure proxy ready before start
    security_opt: ["no-new-privileges:true"]  # Drop root privileges for security
    restart: unless-stopped  # Auto-restart for resilience

  worker:
    image: pulse-bridge-worker:1.0 
    container_name: pulse-bridge-worker  
    environment: 
      <<: *app-env  # Reuse common .NET env
      App__SendAndReceiveUrl: http://api:8080/api/external/send  # SignalR endpoint
    depends_on:
      - rabbitmq  # Needs broker to connect
      - api  # Talks to API/SignalR
      - redis  # Uses Redis for caching
      - otel-collector  # Optional: waits for OTEL
    networks: [app_net, data_net]  # Access app and data tiers
    security_opt: ["no-new-privileges:true"]  # Drop root privileges for security
    restart: unless-stopped  # Auto-restart for resilience

  scheduler:
    image: pulse-bridge-scheduler:1.0  
    container_name: pulse-bridge-scheduler 
    environment:
      <<: *app-env  # Merge common env
      Quartz__JobStore: AdoNet  # Persist jobs in DB
      ConnectionStrings__QuartzNet: ${DB_CONN}  # DB for Quartz.NET
      App__IntervalInSeconds: 5  # Worker polling interval
    depends_on:
      - sql  # Requires DB first
      - rabbitmq  # Publishes/consumes via broker
      - otel-collector  # Optional: waits for OTEL
    networks: [app_net, data_net]  # Needs app/data access
    security_opt: ["no-new-privileges:true"]  # Drop root privileges for security
    restart: unless-stopped  # Auto-restart for resilience
  
  sql:
    image: mcr.microsoft.com/mssql/server:2022-latest  # SQL Server 2022 image
    container_name: pulse-bridge-sql  # Stable name
    environment:
      ACCEPT_EULA: "Y"  # Required to run MSSQL
      SA_PASSWORD: ${SA_PASSWORD}  # SA password from .env
      MSSQL_PID: "Developer"  # Free dev edition
    networks: 
      - data_net  # Internal data tier only
      #- edge_net  # Allow host access for management (dev only)
    #ports:
      #- "1433:1433"     # Allow host access for management (dev only)
    volumes:
      - mssqldata:/var/opt/mssql  
    security_opt: ["no-new-privileges:true"]  # Drop root privileges for security
    restart: unless-stopped  

  # Redis for caching and pub/sub
  redis:
    image: redis:7.2  
    command: ["redis-server", "--appendonly", "yes","--requirepass","${REDIS_PW}"]  # Enable AOF persistence
    container_name: pulse-bridge-redis  
    networks: [data_net]  # Internal data tier only
    #ports:
      #- "6379:6379"   # Expose only if needed for external access
    volumes:
      - redisdata:/data  
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PW}", "ping"]  # Liveness probe
      interval: 10s
      timeout: 5s
      retries: 10
    security_opt: ["no-new-privileges:true"]  # Drop root privileges for security
    restart: unless-stopped 

  # RabbitMQ broker as message queue
  rabbitmq:
    image: rabbitmq:3.13-management  # Broker with management UI
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER} 
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}  
    networks: [data_net]  # Internal data tier only
    #ports:
      #- "15672:15672" # Mgmt UI; expose only in dev
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq  
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]  # Liveness probe
      interval: 10s
      timeout: 5s
      retries: 10
    security_opt: ["no-new-privileges:true"]  # Drop root privileges for security
    restart: unless-stopped  

  # OpenTelemetry Collector (OTel)
  otel-collector:
    image: otel/opentelemetry-collector:0.98.0
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./traefik/otel/collector-config.yml:/etc/otel-collector-config.yaml:ro
    networks: [app_net]
    healthcheck: { test: ["CMD","wget","-qO-","http://localhost:13133/"], interval: 30s, timeout: 5s, retries: 5 }
    security_opt: ["no-new-privileges:true"]
    cap_drop: ["ALL"]
    restart: unless-stopped

  # Jaeger UI for viewing traces (optional)
  jaeger:
    image: jaegertracing/all-in-one:1.57
    networks: [app_net]        # keep it internal; Traefik also sits on app_net
    labels:
      traefik.enable: "true"
      traefik.http.routers.otel.rule: Host(`otel.localtest.me`)
      traefik.http.routers.otel.entrypoints: websecure
      traefik.http.routers.otel.tls: "true"
      traefik.http.services.otel.loadbalancer.server.port: "16686"
      traefik.http.routers.otel.middlewares: gzip@file,secure-headers@file
    security_opt: ["no-new-privileges:true"]
    cap_drop: ["ALL"]
    restart: unless-stopped

# Persist state so host reboots don't lose data
volumes:
  mssqldata:  
  redisdata:  
  rabbitmq_data:  
