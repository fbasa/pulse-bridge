version: "3.9"

name: pulse-bridge

x-env: &app-env
  ASPNETCORE_ENVIRONMENT: Development
  ASPNETCORE_URLS: http://0.0.0.0:8080
  # App settings (override via .env)
  ConnectionStrings__QuartzNet: ${DB_CONN}
  Redis__ConnectionString: ${REDIS_CONN}
  MessageBroker__Host: rabbitmq
  MessageBroker__Username: ${RABBITMQ_USER}
  MessageBroker__Password: ${RABBITMQ_PASS}
  # SignalR backplane
  SignalR__UseRedisBackplane: "true"

networks:
  edge_net: { driver: bridge }
  app_net: { driver: bridge, internal: true }
  data_net: { driver: bridge, internal: true }

services:
  traefik:
    image: traefik:v3.1
    command:
      - --api.dashboard=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      # For local HTTPS, uncomment and provide certs
      # - --entrypoints.websecure.address=:443
    ports:
      - "80:80"
      - "8080:8080"
      # - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks: [edge_net, app_net]
    healthcheck:
      test: ["CMD", "traefik", "healthcheck"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    image: pulse-bridge-web:1.0
    container_name: pulse-bridge-web
    ports:
      - "8081:80"                    # browse SPA at http://localhost:8081
    depends_on:
      - api
    restart: unless-stopped

  api:
    image: pulse-bridge-api:1.0
    container_name: pulse-bridge-api
    ports:
      - "8082:8080"                    # optional: expose for direct access (dev only)
    environment: *app-env
    depends_on:
      - sql
      - redis
    networks: [edge_net, app_net, data_net]
    labels:
      - traefik.enable=true
      - traefik.http.routers.api.rule=Host(`api.localtest.me`)
      - traefik.http.routers.api.entrypoints=web
      - traefik.http.services.api.loadbalancer.server.port=8080
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  worker:
    image: pulse-bridge-worker:1.0
    container_name: pulse-bridge-worker
    environment: *app-env
    depends_on:
      - rabbitmq
      - api
    networks: [app_net, data_net]
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/"]
      interval: 10s
      timeout: 5s
      retries: 10

  scheduler:
    image: pulse-bridge-scheduler:1.0
    container_name: pulse-bridge-scheduler
    environment:
      <<: *app-env
      Quartz__JobStore: AdoNet
      ConnectionStrings__QuartzNet: ${DB_CONN}
    depends_on:
      - sql
      - rabbitmq
    networks: [app_net, data_net]
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/"]
      interval: 10s
      timeout: 5s
      retries: 10

  sql:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: pulse-bridge-sql
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: ${SA_PASSWORD}
      MSSQL_PID: "Developer"
    networks: [data_net]
    ports:
      - "1433:1433"   # only expose if you really need external access (for dev only)
    volumes:
      - mssqldata:/var/opt/mssql
    restart: unless-stopped

  redis:
    image: redis:7.2
    command: ["redis-server", "--appendonly", "yes"]
    container_name: pulse-bridge-redis
    networks: [data_net]
    ports:
      - "6379:6379"   # same note: expose only if needed (for dev only)
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3.13-management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    networks: [data_net]
    ports:
      - "15672:15672" # mgmt UI (dev only)
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

volumes:
  mssqldata:
  redisdata:
  rabbitmq_data:
